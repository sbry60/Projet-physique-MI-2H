import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib.widgets import Slider, Button
from scipy.integrate import solve_ivp
import warnings
warnings.filterwarnings('ignore')

class RamsauerAnimation:
    def __init__(self):
        # Paramètres physiques par défaut
        self.hbar = 1.0
        self.m = 1.0
        self.V0 = 8.0  # Profondeur du puits
        self.a = 2.0   # Largeur du puits
        
        # Paramètres du paquet d'ondes
        self.k0 = 3.0  # Nombre d'onde central
        self.sigma = 1.0  # Largeur du paquet
        self.x0 = -8.0  # Position initiale
        
        # Paramètres numériques
        self.x_min, self.x_max = -12, 12
        self.N = 1024
        self.dx = (self.x_max - self.x_min) / self.N
        self.x = np.linspace(self.x_min, self.x_max, self.N)
        
        # Paramètres temporels
        self.dt = 0.01
        self.t_max = 8.0
        self.t = 0.0
        
        # État initial
        self.reset_wave_packet()
        
        # Configuration matplotlib
        plt.style.use('dark_background')
        self.setup_figure()
        
    def reset_wave_packet(self):
        """Initialise le paquet d'ondes gaussien"""
        # Paquet d'ondes gaussien avec moment k0
        envelope = np.exp(-(self.x - self.x0)**2 / (2 * self.sigma**2))
        phase = np.exp(1j * self.k0 * self.x)
        normalization = (2 * np.pi * self.sigma**2)**(-0.25)
        
        self.psi = normalization * envelope * phase
        self.t = 0.0
        
    def potential(self, x):
        """Potentiel en puits carré"""
        V = np.zeros_like(x)
        mask = np.abs(x) < self.a/2
        V[mask] = -self.V0
        return V
        
    def hamiltonian_step(self, psi):
        """Un pas d'évolution selon l'équation de Schrödinger"""
        # Opérateur énergie cinétique dans l'espace des k
        k = np.fft.fftfreq(self.N, self.dx) * 2 * np.pi
        
        # Split-step Fourier method
        # 1. Demi-pas de potentiel
        V = self.potential(self.x)
        psi *= np.exp(-1j * V * self.dt / (2 * self.hbar))
        
        # 2. Pas complet d'énergie cinétique (transformée de Fourier)
        psi_k = np.fft.fft(psi)
        T_k = self.hbar**2 * k**2 / (2 * self.m)
        psi_k *= np.exp(-1j * T_k * self.dt / self.hbar)
        psi = np.fft.ifft(psi_k)
        
        # 3. Demi-pas de potentiel
        psi *= np.exp(-1j * V * self.dt / (2 * self.hbar))
        
        return psi
        
    def analytical_transmission(self, k_val):
        """Coefficient de transmission analytique"""
        if k_val <= 0:
            return 0
        
        E = self.hbar**2 * k_val**2 / (2 * self.m)
        if E + self.V0 <= 0:
            return 0
            
        k_inside = np.sqrt(2 * self.m * (E + self.V0)) / self.hbar
        
        denominator = 1 + (self.V0**2 * np.sin(k_inside * self.a)**2) / (4 * E * (E + self.V0))
        return 1 / denominator
        
    def calculate_probabilities(self):
        """Calcule les probabilités de transmission et réflexion"""
        prob_density = np.abs(self.psi)**2
        
        # Régions
        left_mask = self.x < -self.a/2
        center_mask = np.abs(self.x) <= self.a/2
        right_mask = self.x > self.a/2
        
        P_left = np.trapz(prob_density[left_mask], self.x[left_mask])
        P_center = np.trapz(prob_density[center_mask], self.x[center_mask])
        P_right = np.trapz(prob_density[right_mask], self.x[right_mask])
        
        return P_left, P_center, P_right
        
    def setup_figure(self):
        """Configure l'interface graphique"""
        self.fig = plt.figure(figsize=(16, 10))
        self.fig.suptitle('Diffusion dynamique d\'un paquet d\'ondes - Effet Ramsauer-Townsend', 
                         fontsize=16, color='white')
        
        # Grille de sous-graphiques
        gs = self.fig.add_gridspec(3, 3, hspace=0.3, wspace=0.3)
        
        # Graphique principal - fonction d'onde
        self.ax_main = self.fig.add_subplot(gs[0:2, :])
        self.ax_main.set_xlim(self.x_min, self.x_max)
        self.ax_main.set_ylim(-0.1, 0.8)
        self.ax_main.set_xlabel('Position x')
        self.ax_main.set_ylabel('Amplitude')
        self.ax_main.grid(True, alpha=0.3)
        
        # Graphique des probabilités
        self.ax_prob = self.fig.add_subplot(gs[2, 0])
        self.ax_prob.set_title('Probabilités')
        self.ax_prob.set_xlabel('Temps')
        self.ax_prob.set_ylabel('Probabilité')
        self.ax_prob.grid(True, alpha=0.3)
        
        # Graphique du potentiel
        self.ax_pot = self.fig.add_subplot(gs[2, 1])
        self.ax_pot.set_title('Potentiel')
        self.ax_pot.plot(self.x, self.potential(self.x), 'r-', linewidth=2)
        self.ax_pot.set_xlabel('Position x')
        self.ax_pot.set_ylabel('V(x)')
        self.ax_pot.grid(True, alpha=0.3)
        
        # Graphique de transmission théorique
        self.ax_trans = self.fig.add_subplot(gs[2, 2])
        self.ax_trans.set_title('Transmission vs k')
        k_theory = np.linspace(0.5, 6, 200)
        T_theory = [self.analytical_transmission(k) for k in k_theory]
        self.ax_trans.plot(k_theory, T_theory, 'g-', linewidth=2)
        self.ax_trans.axvline(self.k0, color='yellow', linestyle='--', alpha=0.7, label=f'k₀ = {self.k0}')
        self.ax_trans.set_xlabel('Nombre d\'onde k')
        self.ax_trans.set_ylabel('Coefficient T')
        self.ax_trans.grid(True, alpha=0.3)
        self.ax_trans.legend()
        
        # Lignes pour l'animation
        self.line_real, = self.ax_main.plot([], [], 'b-', linewidth=2, label='Re(ψ)')
        self.line_imag, = self.ax_main.plot([], [], 'r-', linewidth=2, label='Im(ψ)')
        self.line_prob, = self.ax_main.plot([], [], 'yellow', linewidth=3, label='|ψ|²')
        
        # Visualisation du puits
        V_plot = self.potential(self.x)
        V_normalized = (V_plot + self.V0) / self.V0 * 0.1  # Normalisation pour affichage
        self.ax_main.fill_between(self.x, 0, V_normalized, alpha=0.3, color='red', label='Potentiel')        
        self.ax_main.legend(loc='upper right')
        
        # Texte d'information
        self.info_text = self.ax_main.text(0.02, 0.95, '', transform=self.ax_main.transAxes, 
                                         fontsize=12, verticalalignment='top', 
                                         bbox=dict(boxstyle='round', facecolor='black', alpha=0.7))
        
        # Listes pour historique des probabilités
        self.time_history = []
        self.prob_left_history = []
        self.prob_center_history = []
        self.prob_right_history = []
        
        # Configuration des sliders
        self.setup_controls()
        
    def setup_controls(self):
        """Configure les contrôles interactifs"""
        # Zone pour les sliders
        slider_ax_k0 = plt.axes([0.2, 0.02, 0.3, 0.03])
        slider_ax_V0 = plt.axes([0.6, 0.02, 0.3, 0.03])
        
        self.slider_k0 = Slider(slider_ax_k0, 'k₀', 1.0, 6.0, valinit=self.k0, valfmt='%.1f')
        self.slider_V0 = Slider(slider_ax_V0, 'V₀', 2.0, 15.0, valinit=self.V0, valfmt='%.1f')
        
        # Boutons
        reset_ax = plt.axes([0.05, 0.02, 0.08, 0.04])
        self.reset_button = Button(reset_ax, 'Reset')
        
        # Connexion des événements
        self.slider_k0.on_changed(self.update_parameters)
        self.slider_V0.on_changed(self.update_parameters)
        self.reset_button.on_clicked(self.reset_animation)
        
    def update_parameters(self, val):
        """Met à jour les paramètres depuis les sliders"""
        self.k0 = self.slider_k0.val
        self.V0 = self.slider_V0.val
        
        # Met à jour le graphique de transmission
        k_theory = np.linspace(0.5, 6, 200)
        T_theory = [self.analytical_transmission(k) for k in k_theory]
        self.ax_trans.clear()
        self.ax_trans.plot(k_theory, T_theory, 'g-', linewidth=2)
        self.ax_trans.axvline(self.k0, color='yellow', linestyle='--', alpha=0.7, label=f'k₀ = {self.k0:.1f}')
        self.ax_trans.set_title('Transmission vs k')
        self.ax_trans.set_xlabel('Nombre d\'onde k')
        self.ax_trans.set_ylabel('Coefficient T')
        self.ax_trans.grid(True, alpha=0.3)
        self.ax_trans.legend()
        
        # Met à jour le potentiel
        self.ax_pot.clear()
        self.ax_pot.plot(self.x, self.potential(self.x), 'r-', linewidth=2)
        self.ax_pot.set_title('Potentiel')
        self.ax_pot.set_xlabel('Position x')
        self.ax_pot.set_ylabel('V(x)')
        self.ax_pot.grid(True, alpha=0.3)
        
        plt.draw()
        
    def reset_animation(self, event):
        """Remet à zéro l'animation"""
        self.reset_wave_packet()
        self.time_history.clear()
        self.prob_left_history.clear()
        self.prob_center_history.clear()
        self.prob_right_history.clear()
        
        # Efface l'historique des probabilités
        self.ax_prob.clear()
        self.ax_prob.set_title('Probabilités')
        self.ax_prob.set_xlabel('Temps')
        self.ax_prob.set_ylabel('Probabilité')
        self.ax_prob.grid(True, alpha=0.3)
        
    def animate(self, frame):
        """Fonction d'animation"""
        # Évolution temporelle
        for _ in range(3):  # Plusieurs pas par frame pour une animation plus fluide
            if self.t < self.t_max:
                self.psi = self.hamiltonian_step(self.psi)
                self.t += self.dt
        
        # Calcul des quantités à afficher
        psi_real = np.real(self.psi)
        psi_imag = np.imag(self.psi)
        prob_density = np.abs(self.psi)**2
        
        # Mise à jour des lignes
        self.line_real.set_data(self.x, psi_real)
        self.line_imag.set_data(self.x, psi_imag)
        self.line_prob.set_data(self.x, prob_density)
        
        # Calcul des probabilités
        P_left, P_center, P_right = self.calculate_probabilities()
        
        # Historique des probabilités
        self.time_history.append(self.t)
        self.prob_left_history.append(P_left)
        self.prob_center_history.append(P_center)
        self.prob_right_history.append(P_right)
        
        # Mise à jour du graphique des probabilités
        if len(self.time_history) > 1:
            self.ax_prob.clear()
            self.ax_prob.plot(self.time_history, self.prob_left_history, 'b-', label='Réflexion')
            self.ax_prob.plot(self.time_history, self.prob_center_history, 'g-', label='Dans le puits')
            self.ax_prob.plot(self.time_history, self.prob_right_history, 'r-', label='Transmission')
            self.ax_prob.set_title('Probabilités')
            self.ax_prob.set_xlabel('Temps')
            self.ax_prob.set_ylabel('Probabilité')
            self.ax_prob.legend()
            self.ax_prob.grid(True, alpha=0.3)
            self.ax_prob.set_xlim(0, self.t_max)
            self.ax_prob.set_ylim(0, 1)
        
        # Mise à jour du texte d'information
        T_theoretical = self.analytical_transmission(self.k0)
        info_str = (f'Temps: {self.t:.2f}\\n'
                   f'k₀ = {self.k0:.1f}, V₀ = {self.V0:.1f}\\n'
                   f'T théorique = {T_theoretical:.3f}\\n'
                   f'Réflexion: {P_left:.3f}\\n'
                   f'Transmission: {P_right:.3f}\\n'
                   f'Conservation: {P_left + P_center + P_right:.3f}')
        
        self.info_text.set_text(info_str)
        
        return self.line_real, self.line_imag, self.line_prob
    
    def start_animation(self):
        """Démarre l'animation"""
        self.anim = animation.FuncAnimation(
            self.fig, self.animate, frames=int(self.t_max/self.dt)//3, 
            interval=50, blit=False, repeat=True
        )
        plt.show()

# Utilisation
if __name__ == "__main__":
    print("🌊 Animation de l'effet Ramsauer-Townsend")
    print("="*50)
    print("Contrôles:")
    print("• Slider k₀: Modifie le nombre d'onde central")
    print("• Slider V₀: Modifie la profondeur du puits")
    print("• Bouton Reset: Remet à zéro la simulation")
    print("• Fermez la fenêtre pour arrêter")
    print("="*50)
    
    # Création et lancement de l'animation
    ramsauer_anim = RamsauerAnimation()
    ramsauer_anim.start_animation()